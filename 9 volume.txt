https://bernardolankheet.medium.com/03-conceito-geral-de-volumes-no-docker-6d8b08abdc2a
https://github.com/ravdy/Docker/blob/master/Docker_Volumes/docker_volumes.md
https://docs.docker.com/storage/
https://spin.atomicobject.com/2019/07/11/docker-volumes-explained/

By default all files created inside a container are stored on a writable container layer. This means that:
The data doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.

A volume is a specially designated directory within one or more containers that
bypasses the Union File System to provide several useful features for persistent or
shared data:

-Volumes can be shared and reused between containers.
-A container doesn’t have to be running to share its volumes.
-Changes to a volume are made directly.
-Changes to a volume will not be included when you update an image.
-Volumes persist until no containers use them.

This allows us to add data (like source code), a database, or other content into an
image without committing it to the image and allows us to share that data between
containers. 

This means that changes to a volume are made directly and bypass the image. 
They will not be included when we commit or build an image.

-v option allows us to create a volume in our container from a directory on the host
The -v option works by specifying a directory or mount on the local host separated
from the directory on the container with a :. If the container directory doesn’t
exist Docker will create it.

volumes podem ter permissões, podendo ser read-only ou read-write, rw e ro, por default é rw

docker run -v $HOSTDIR:$DOCKERDIR

docker volume ls
docker container inspect id/nome_container | voce encontra informacoes do volumes utilizados pelo container na sessao mount
docker inspect <volume_name>
docker volume prune | to remove all local volumes not used by at least one running container

docker volume types:
-named voluems
-anonymous volumes
-host volume or bind volumes

# Named volumes
Cria o volume dados-do-banco e vincula ele ao diretório do container que guarda as informações que desejamos salvar: /var/lib/mysql

docker volume create --name dados-do-banco
docker container run --name db -v dados-do-banco:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=alura

ou simplemente, e caso o volume nao exista eh criado automatico

docker container run --name db -v dados-do-banco:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=alura

Como o volume não está atrelado diretamente a um container, ele pode ser portável para qualquer outro, basta referencia-lo no momento da criação do container.

# Anonymous volumes
Anonymous volumes are not given an explicit name when they are first mounted into a container, so Docker gives them a random name that is guaranteed to be unique within a given Docker host. Besides the name, named and anonymous volumes behave in the same ways.

Create a container with an anonymous volume which is mounted as /data01 on container. in this case we mention container directory name. On host system it maps to a random-hash directory under /var/lib/docker directory.

docker run -it --name vtwebuat01 -v /data01 nginx /bin/bash

=====================================
# Host volume — Bind mounts (Mapeamento de pasta do host)
Em palavras mais simples, nada é que um compartilhamento de um diretório local do host para um diretório de um container.

docker run --name vtest -it -v C:\Users\leandro\Desktop\v0test:/var/le ubuntu bash
root@9160a12f1c9f:/# cd var/le
root@9160a12f1c9f:/var/le# echo "oi" > teste.txt
teste.txt ira aparecer no diretorio C:\Users\leandro\Desktop\v0test

ou inves de -v poderia ser -mount

docker container run –d –mount ‘type=volume,source=bancomysql,target=/var/lib/mysql,readwrite’ mysql

# Verificando e identificando os volumes criados